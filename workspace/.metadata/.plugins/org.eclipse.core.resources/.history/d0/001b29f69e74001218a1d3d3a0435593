public class UnitFactory {	

    private AircraftBuilderBomber aircraftBuilderBomber;
    private AircraftBuilderMissile aircraftBuilderMissileShooter;

    
    /**
     * Sets the local instance of aircraftBomberBuilder
     * @param aircraftBomberBuilder
     */
    public void setAircraftBuilder(String aircraftType, AircraftBuilder aircraftBuilder) 
    {
		if(aircraftType == "Bomber")
		{
	    	this.aircraftBuilderBomber = (AircraftBuilderBomber)aircraftBuilder; 
		}
		else if(aircraftType == "MissileShooter")
		{
	    	this.aircraftBuilderMissileShooter = (AircraftBuilderMissile)aircraftBuilder; 
		}
    }
    
    /**
     * Getter for newly created bomber 
     * @return
     */
    public Aircraft getAircraft(AircraftType aircraftType) 
    {
		switch (aircraftType) {
		case Bomber:
	    	return (Aircraft)aircraftBuilderBomber.getAircraft(aircraftType); 
		case MissileShooter:
	    	return (Aircraft)aircraftBuilderMissileShooter.getAircraft(aircraftType); 
		default:
			return null;
		}
    }
 
    /**
     * Constructor for our bomber, telling bomber builder to create bomber and return
     * and build all necessary parts
     */
    public void constructAircraftBuilder(AircraftType aircraftType) {
		switch (aircraftType) {
		case Bomber:
			aircraftBuilderBomber.createNewAircraft(aircraftType);
			aircraftBuilderBomber.buildFuselage();
			aircraftBuilderBomber.buildPropellor();
			aircraftBuilderBomber.buildWings();
			break;
		case MissileShooter:
			aircraftBuilderMissileShooter.createNewAircraft(aircraftType);
			aircraftBuilderMissileShooter.buildFuselage();
			aircraftBuilderMissileShooter.buildPropellor();
			aircraftBuilderMissileShooter.buildWings();	
			break;
		default:
			break;
		}

 
    }
	
	public static AircraftMissileShooter createAircraftMissileShooter(){
		return new AircraftMissileShooter();
	}
	
	public static Tank createTank(){
		return new Tank();
	}
	
	public static Soldier createSoldier(){
		return new Soldier();
	}
}
